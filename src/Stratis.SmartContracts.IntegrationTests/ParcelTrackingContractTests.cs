using System.Text;
using Stratis.Bitcoin.Features.SmartContracts.Models;
using Stratis.SmartContracts.CLR;
using Stratis.SmartContracts.CLR.Compilation;
using Stratis.SmartContracts.CLR.Serialization;
using Stratis.SmartContracts.Networks;
using Stratis.SmartContracts.Tests.Common.MockChain;
using Xunit;

namespace Stratis.SmartContracts.IntegrationTests
{
    public class ParcelTrackingContractTests
    {
        private readonly IMockChain mockChain;
        private readonly MockChainNode node1;
        private readonly MockChainNode node2;
        private readonly SmartContractsPoARegTest network;

        private const string ParcelTrackingContract =
            "using Stratis.SmartContracts;\r\nusing System.Diagnostics;\r\n\r\n[Deploy]\r\npublic class ParcelTracking: SmartContract\r\n{\r\n    // Events structures\r\n\r\n    public struct CourierNotRegistered\r\n    {\r\n        public string ContractMethod;\r\n        public Address CourierAddress;\r\n        public string CourierSpecifiedTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct ParcelDoesNotExist\r\n    {\r\n        public string ContractMethod;\r\n        public Address CourierAddress;\r\n        public string CourierParcelId;\r\n        public string CourierSpecifiedTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct DataResetParcelTracking\r\n    {\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct DataResetFailedParcelTracking\r\n    {\r\n        public ulong Timestamp;\r\n        public Address AttemptedFromAddress;\r\n        public Address PermittedAddress;\r\n    }\r\n\r\n    public struct ParcelAcceptedByCourier\r\n    {\r\n        public Address CourierEthereumAccountId;\r\n        public byte[] UniqueParcelId;\r\n        public string CourierParcelId;\r\n        public string PersonId;\r\n        public string LocationDescription;\r\n        public string LocationPostcode;\r\n        public string CourierAcceptedDateTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct ParcelTransferredToIntermediatePointByCourier\r\n    {\r\n        public Address CourierEthereumAccountId;\r\n        public byte[] UniqueParcelId;\r\n        public string CourierParcelId;\r\n        public string LocationDescription;\r\n        public string LocationPostcode;\r\n        public string CourierTransferredDateTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct ParcelAcceptedByNewCourier\r\n    {\r\n        public Address TransferToCourierEthereumAccountId;\r\n        public Address TransferFromCourierEthereumAccountId;\r\n        public byte[] UniqueParcelId;\r\n        public string OldCourierParcelId;\r\n        public string NewCourierParcelId;\r\n        public string LocationDescription;\r\n        public string LocationPostcode;\r\n        public string CourierAcceptedDateTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct ParcelDeliveredToFinalDestinationByCourier\r\n    {\r\n        public Address CourierEthereumAccountId;\r\n        public byte[] UniqueParcelId;\r\n        public string CourierParcelId;\r\n        public string LocationDescription;\r\n        public string LocationPostcode;\r\n        public string CourierDeliveredDateTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct ParcelDeclaredLostByCourier\r\n    {\r\n        public Address CourierEthereumAccountId;\r\n        public byte[] UniqueParcelId;\r\n        public string CourierParcelId;\r\n        public string Reason;\r\n        public string CourierDeclarationDateTime;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    // Structs \r\n\r\n    public struct Parcel\r\n    {\r\n        public byte[] ParcelUniqueId;\r\n    }\r\n\r\n    // Properties\r\n\r\n    private ulong Version\r\n    {\r\n        get\r\n        {\r\n            return this.PersistentState.GetUInt64(\"Version\");\r\n        }\r\n        set\r\n        {\r\n            this.PersistentState.SetUInt64(\"Version\", value);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets or sets the address of the couriers contract\r\n    /// </summary>\r\n    private Address CouriersContractAddress\r\n    {\r\n        get\r\n        {\r\n            return this.PersistentState.GetAddress(\"CouriersContractAddress\");\r\n        }\r\n        set\r\n        {\r\n            this.PersistentState.SetAddress(\"CouriersContractAddress\", value);\r\n        }\r\n    }\r\n\r\n    private Address Creator\r\n    {\r\n        get\r\n        {\r\n            return this.PersistentState.GetAddress(\"Creator\");\r\n        }\r\n        set\r\n        {\r\n            this.PersistentState.SetAddress(\"Creator\", value);\r\n        }\r\n    }\r\n\r\n    // Constructors\r\n\r\n    /// <summary>\r\n    /// Constructor taking all arguments\r\n    /// </summary>\r\n    /// <param name=\"state\">The smart contract state</param>\r\n    /// <param name=\"couriersContractAddress\">The address to the couriers contract</param>\r\n    public ParcelTracking(ISmartContractState state, Address couriersContractAddress)\r\n        :base(state)\r\n    {\r\n        this.Assert(couriersContractAddress != Address.Zero, \"No couriers contract address was supplied\");\r\n\r\n        this.CouriersContractAddress = couriersContractAddress;\r\n        this.Creator = this.Message.Sender;\r\n        this.Version = 0;\r\n\r\n        var courierContractIsHealthyResult = this.Call(this.CouriersContractAddress, 0, \"HealthCheck\");\r\n        this.Assert(courierContractIsHealthyResult.Success && (bool)courierContractIsHealthyResult.ReturnValue, \"Unable to call the couriers contract\");\r\n    }\r\n\r\n    // Helper / Courier Methods\r\n\r\n    public bool IsCourierRegistered(Address courierAddress)\r\n    {      \r\n        var result = this.Call(this.CouriersContractAddress, 0, \"IsAddressRegistered\", new object[] { courierAddress });\r\n        this.Assert(result.Success);\r\n        return (bool)result.ReturnValue;\r\n    }\r\n\r\n    private byte[] GenerateUniqueId(string courierParcelId)\r\n    {\r\n        //TODO: Confirm this works!\r\n        return this.Keccak256(this.Serializer.Serialize(this.Message.Sender.ToString() + courierParcelId.ToString() + this.Block.Number.ToString()));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the parcel details by the courier's parcel ID\r\n    /// </summary>\r\n    /// <param name=\"courierParcelId\">The courier's parcel ID</param>\r\n    /// <returns>Returns the parcel</returns>\r\n    private Parcel GetParcel(string courierParcelId)\r\n    {\r\n        return this.PersistentState.GetStruct<Parcel>($\"AddressToCourierParcelIdToParcelUid[{this.Version}][{this.Message.Sender}][{courierParcelId}]\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// Persists a parcel\r\n    /// </summary>\r\n    /// <param name=\"courierParcelId\">The courier's parcel ID</param>\r\n    /// <param name=\"value\">The parcel to persist</param>\r\n    private void SetParcel(string courierParcelId, Parcel value)\r\n    {\r\n        this.PersistentState.SetStruct<Parcel>($\"AddressToCourierParcelIdToParcelUid[{this.Version}][{this.Message.Sender}][{courierParcelId}]\", value);\r\n    }\r\n\r\n    private void RemoveParcel(string courierParcelId)\r\n    {\r\n        this.PersistentState.Clear($\"AddressToCourierParcelIdToParcelUid[{this.Version}][{this.Message.Sender}][{courierParcelId}]\");\r\n    }\r\n\r\n    private bool DoesParcelExist(Address parcelOwner, string courierParcelId)\r\n    {\r\n        //TODO: Test that this method works!\r\n        return this.PersistentState.GetStruct<Parcel>($\"AddressToCourierParcelIdToParcelUid[{this.Version}][{parcelOwner}][{courierParcelId}]\").ParcelUniqueId == new byte[0];\r\n    }\r\n\r\n    private bool DoesParcelExist(string courierParcelId)\r\n    {\r\n        return this.DoesParcelExist(this.Message.Sender, courierParcelId);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets something approximating a timestamp\r\n    /// </summary>\r\n    private ulong GetTimestamp()\r\n    {\r\n        return this.Block.Number;\r\n    }\r\n\r\n\r\n    // Contract Methods\r\n\r\n    /// <summary>\r\n    /// Sets the address of the courier contract\r\n    /// </summary>\r\n    /// <param name=\"couriersContractAddress\">The address of the couriers contract</param>\r\n    public void UpdateCouriersAddress(Address couriersContractAddress)\r\n    {\r\n        this.CouriersContractAddress = couriersContractAddress;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Courier accepts ownership of a parcel\r\n    /// </summary>\r\n    /// <param name=\"courierParcelId\">The ID of the courier accepting the parcel</param>\r\n    /// <param name=\"personId\"></param>\r\n    /// <param name=\"locationDescription\">The location of the parcel in a short description</param>\r\n    /// <param name=\"locationPostcode\">The postcode location of the parcel when it was accepted</param>\r\n    /// <param name=\"courierAcceptedDateTime\">The date and time the courier declared they took ownership of the parcel</param>\r\n    public void CourierAcceptParcel(string courierParcelId, string personId, string locationDescription, string locationPostcode, string courierAcceptedDateTime)\r\n    {\r\n        if (this.IsCourierRegistered(this.Message.Sender))\r\n        {\r\n            byte[] uniqueId = this.GenerateUniqueId(courierParcelId);\r\n            this.SetParcel(courierParcelId, new Parcel { ParcelUniqueId = uniqueId });\r\n\r\n            this.Log<ParcelAcceptedByCourier>(new ParcelAcceptedByCourier\r\n            {\r\n                CourierEthereumAccountId = this.Message.Sender,\r\n                UniqueParcelId = this.GetParcel(courierParcelId).ParcelUniqueId,\r\n                CourierParcelId = courierParcelId,\r\n                PersonId = personId,\r\n                LocationDescription = locationDescription,\r\n                LocationPostcode = locationPostcode,\r\n                CourierAcceptedDateTime = courierAcceptedDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n            {\r\n                ContractMethod = nameof(this.CourierAcceptParcel),\r\n                CourierAddress = this.Message.Sender,\r\n                CourierSpecifiedTime = courierAcceptedDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n        });\r\n        }\r\n    }\r\n\r\n    public void CourierTransferParcelToIntermediatePoint(string courierParcelId, string locationDescription, string locationPostcode, string courierTransferredDateTime)\r\n    {\r\n        if (this.IsCourierRegistered(this.Message.Sender))\r\n        {\r\n            if (this.DoesParcelExist(courierParcelId))\r\n            {\r\n                this.Log<ParcelTransferredToIntermediatePointByCourier>(new ParcelTransferredToIntermediatePointByCourier\r\n                {\r\n                    CourierEthereumAccountId = this.Message.Sender,\r\n                    UniqueParcelId = this.GetParcel(courierParcelId).ParcelUniqueId,\r\n                    CourierParcelId = courierParcelId,\r\n                    LocationDescription = locationDescription,\r\n                    LocationPostcode = locationPostcode,\r\n                    CourierTransferredDateTime = courierTransferredDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.Log<ParcelDoesNotExist>(new ParcelDoesNotExist\r\n                {\r\n                    ContractMethod = nameof(this.CourierTransferParcelToIntermediatePoint),\r\n                    CourierAddress = this.Message.Sender,\r\n                    CourierParcelId = courierParcelId,\r\n                    CourierSpecifiedTime = courierTransferredDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n            {\r\n                ContractMethod = nameof(this.CourierTransferParcelToIntermediatePoint),\r\n                CourierAddress = this.Message.Sender,\r\n                CourierSpecifiedTime = courierTransferredDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Enables a courier to transfer from one courier to another\r\n    /// </summary>\r\n    /// <param name=\"transferFromCourierAccountId\">The address of the courier's account to transfer from</param>\r\n    /// <param name=\"oldCourierParcelId\">The courier's parcel ID of the old courier who is transfering the parcel</param>\r\n    /// <param name=\"newCourierParcelId\">The courier's parcel ID the new courier will use for them to track the parcel</param>\r\n    /// <param name=\"locationDescription\">A description of the location of the parcel</param>\r\n    /// <param name=\"locationPostcode\">The postcode location of the parcel</param>\r\n    /// <param name=\"courierAcceptedDateTime\">The date/time the new courier accepted the new parcel</param>\r\n    public void NewCourierAcceptParcel(Address transferFromCourierAccountId, string oldCourierParcelId, string newCourierParcelId, string locationDescription, string locationPostcode, string courierAcceptedDateTime)\r\n    {\r\n        if (this.IsCourierRegistered(this.Message.Sender))\r\n        {\r\n            if (this.IsCourierRegistered(transferFromCourierAccountId))\r\n            {\r\n                if(this.DoesParcelExist(transferFromCourierAccountId, oldCourierParcelId))\r\n                {\r\n                    var parcel = this.GetParcel(oldCourierParcelId);\r\n                    this.SetParcel(newCourierParcelId, parcel);\r\n\r\n                    // 'Delete' the parcel\r\n                    this.RemoveParcel(oldCourierParcelId);\r\n\r\n                    this.Log<ParcelAcceptedByNewCourier>(new ParcelAcceptedByNewCourier\r\n                    {\r\n                        TransferToCourierEthereumAccountId = this.Message.Sender,\r\n                        TransferFromCourierEthereumAccountId = transferFromCourierAccountId,\r\n                        UniqueParcelId = this.GetParcel(newCourierParcelId).ParcelUniqueId,\r\n                        OldCourierParcelId = oldCourierParcelId,\r\n                        NewCourierParcelId = newCourierParcelId,\r\n                        LocationDescription = locationDescription,\r\n                        LocationPostcode = locationPostcode,\r\n                        CourierAcceptedDateTime = courierAcceptedDateTime,\r\n                        Timestamp = this.GetTimestamp()\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    this.Log<ParcelDoesNotExist>(new ParcelDoesNotExist\r\n                    {\r\n                        ContractMethod = nameof(this.CourierTransferParcelToIntermediatePoint),\r\n                        CourierAddress = this.Message.Sender,\r\n                        CourierParcelId = oldCourierParcelId,\r\n                        CourierSpecifiedTime = courierAcceptedDateTime,\r\n                        Timestamp = this.GetTimestamp()\r\n                    });\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n                {\r\n                    ContractMethod = nameof(this.NewCourierAcceptParcel),\r\n                    CourierAddress = transferFromCourierAccountId,\r\n                    CourierSpecifiedTime = courierAcceptedDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n            {\r\n                ContractMethod = nameof(this.NewCourierAcceptParcel),\r\n                CourierAddress = this.Message.Sender,\r\n                CourierSpecifiedTime = courierAcceptedDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Allows the courier to mark the parcel as delivered\r\n    /// </summary>\r\n    /// <param name=\"courierParcelId\">The courier's ID for the parcel</param>\r\n    /// <param name=\"locationDescription\">The description of the location the parcel has been delivered to</param>\r\n    /// <param name=\"locationPostcode\">The postcode of the location the parcel has been delivered to</param>\r\n    /// <param name=\"courierDeliveredDateTime\">The courier's date/time the declare it was delivered</param>\r\n    public void CourierDeliverParcelToFinalDestination(string courierParcelId, string locationDescription, string locationPostcode, string courierDeliveredDateTime)\r\n    {\r\n        if(this.IsCourierRegistered(this.Message.Sender))\r\n        {\r\n            if(this.DoesParcelExist(courierParcelId))\r\n            {\r\n                this.Log<ParcelDeliveredToFinalDestinationByCourier>(new ParcelDeliveredToFinalDestinationByCourier\r\n                {\r\n                    CourierEthereumAccountId = this.Message.Sender,\r\n                    UniqueParcelId = this.GetParcel(courierParcelId).ParcelUniqueId,\r\n                    CourierParcelId = courierParcelId,\r\n                    LocationDescription = locationDescription,\r\n                    LocationPostcode = locationPostcode,\r\n                    CourierDeliveredDateTime = courierDeliveredDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n\r\n                // 'Delete' the parcel\r\n                this.RemoveParcel(courierParcelId);\r\n            }\r\n            else\r\n            {\r\n                this.Log<ParcelDoesNotExist>(new ParcelDoesNotExist\r\n                {\r\n                    ContractMethod = nameof(this.CourierTransferParcelToIntermediatePoint),\r\n                    CourierAddress = this.Message.Sender,\r\n                    CourierParcelId = courierParcelId,\r\n                    CourierSpecifiedTime = courierDeliveredDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n            {\r\n                ContractMethod = nameof(this.CourierDeliverParcelToFinalDestination),\r\n                CourierAddress = this.Message.Sender,\r\n                CourierSpecifiedTime = courierDeliveredDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Method to for a courier to declare that a parcel has been lost\r\n    /// </summary>\r\n    /// <param name=\"courierParcelId\">The courier's ID for the parcel</param>\r\n    /// <param name=\"reason\">The reason the parcel was lost</param>\r\n    /// <param name=\"courierDeclarationDateTime\">The date/time the courier is declaring the parcel lost</param>\r\n    public void CourierDeclareParcelLost(string courierParcelId, string reason, string courierDeclarationDateTime)\r\n    {\r\n        if (this.IsCourierRegistered(this.Message.Sender))\r\n        {\r\n            if (this.DoesParcelExist(courierParcelId))\r\n            {\r\n                this.Log<ParcelDeclaredLostByCourier>(new ParcelDeclaredLostByCourier\r\n                {\r\n                    CourierEthereumAccountId = this.Message.Sender,\r\n                    UniqueParcelId = this.GetParcel(courierParcelId).ParcelUniqueId,\r\n                    CourierParcelId = courierParcelId,\r\n                    Reason = reason,\r\n                    CourierDeclarationDateTime = courierDeclarationDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n\r\n                // 'Delete' the parcel\r\n                this.RemoveParcel(courierParcelId);\r\n            }\r\n            else\r\n            {\r\n                this.Log<ParcelDoesNotExist>(new ParcelDoesNotExist\r\n                {\r\n                    ContractMethod = nameof(this.CourierDeclareParcelLost),\r\n                    CourierAddress = this.Message.Sender,\r\n                    CourierParcelId = courierParcelId,\r\n                    CourierSpecifiedTime = courierDeclarationDateTime,\r\n                    Timestamp = this.GetTimestamp()\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.Log<CourierNotRegistered>(new CourierNotRegistered\r\n            {\r\n                ContractMethod = nameof(this.CourierDeclareParcelLost),\r\n                CourierAddress = this.Message.Sender,\r\n                CourierSpecifiedTime = courierDeclarationDateTime,\r\n                Timestamp = this.GetTimestamp()\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Resets data in the contract (by upping version)\r\n    /// </summary>\r\n    public void ResetAllData()\r\n    {\r\n        var timestamp = this.Block.Number;\r\n\r\n        if (this.Message.Sender == this.Creator)\r\n        {\r\n            this.Version++;\r\n\r\n            this.Log(new DataResetParcelTracking { Timestamp = timestamp });\r\n        }\r\n        else\r\n        {\r\n\r\n            this.Log(new DataResetFailedParcelTracking\r\n            {\r\n                Timestamp = timestamp,\r\n                AttemptedFromAddress = this.Message.Sender,\r\n                PermittedAddress = this.Creator\r\n            });\r\n        }\r\n    }\r\n}";

        private const string CouriersContract =
            "using Stratis.SmartContracts;\r\n\r\n[Deploy]\r\npublic class Couriers : SmartContract\r\n{\r\n    public struct CourierRegistered\r\n    {\r\n        public string CourierName;\r\n        public Address CourierAccountId;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct CourierRegistrationFailed\r\n    {\r\n        public string CourierName;\r\n        public Address CourierAccountId;\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct DataResetCourier\r\n    {\r\n        public ulong Timestamp;\r\n    }\r\n\r\n    public struct DataResetFailedCourier\r\n    {\r\n        public ulong Timestamp;\r\n        public Address AttemptedFromAddress;\r\n        public Address PermittedAddress;\r\n    }\r\n\r\n    public Address Creator\r\n    {\r\n        get\r\n        {\r\n            return this.PersistentState.GetAddress(\"Creator\");\r\n        }\r\n        set\r\n        {\r\n            this.PersistentState.SetAddress(\"Creator\", value);\r\n        }\r\n    }\r\n\r\n    private ulong Version\r\n    {\r\n        get\r\n        {\r\n            return this.PersistentState.GetUInt64(\"Version\");\r\n        }\r\n        set\r\n        {\r\n            this.PersistentState.SetUInt64(\"Version\", value);\r\n        }\r\n    }\r\n\r\n\r\n    public Couriers(ISmartContractState smartContractState)\r\n        :base(smartContractState)\r\n    {\r\n        this.Creator = this.Message.Sender;\r\n        this.Version = 0;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Registers a courier\r\n    /// </summary>\r\n    /// <param name=\"courierName\">The name of the courier to register</param>\r\n    public void RegisterCourier(string courierName)\r\n    {\r\n        var timestamp = this.Block.Number;\r\n\r\n        if (this.PersistentState.GetString($\"CouriersNameByAddress[{this.Version}][{this.Message.Sender}]\") == string.Empty\r\n            && this.PersistentState.GetAddress($\"CouriersAddressByName[{this.Version}][{courierName}]\") == Address.Zero)\r\n        {\r\n\r\n            this.PersistentState.SetString($\"CouriersNameByAddress[{this.Version}][{this.Message.Sender}]\", courierName);\r\n            this.PersistentState.SetAddress($\"CouriersAddressByName[{this.Version}][{courierName}]\", this.Message.Sender);\r\n\r\n            this.Log(new CourierRegistered\r\n            {\r\n                CourierName = courierName,\r\n                CourierAccountId = this.Message.Sender,\r\n                Timestamp = timestamp\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this.Log(new CourierRegistrationFailed\r\n            {\r\n                CourierName = courierName,\r\n                CourierAccountId = this.Message.Sender,\r\n                Timestamp = timestamp\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Resets data in the contract (by upping version)\r\n    /// </summary>\r\n    public void ResetAllData()\r\n    {\r\n        var timestamp = this.Block.Number;\r\n\r\n        if (this.Message.Sender == this.Creator)\r\n        {\r\n            this.Version++;\r\n\r\n            this.Log(new DataResetCourier { Timestamp = timestamp });\r\n        }\r\n        else\r\n        {\r\n\r\n            this.Log(new DataResetFailedCourier\r\n            {\r\n                Timestamp = timestamp,\r\n                AttemptedFromAddress = this.Message.Sender,\r\n                PermittedAddress = this.Creator\r\n            });\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Indicate whether a courier at a particular address has been registered\r\n    /// </summary>\r\n    /// <param name=\"courierAddress\">The address of the courier</param>\r\n    /// <returns>Returns true if the courier has been registered at that address</returns>\r\n    public bool IsAddressRegistered(Address courierAddress)\r\n    {\r\n        bool isRegistered = false;\r\n       \r\n        if(this.PersistentState.GetString($\"CouriersNameByAddress[{this.Version}][{courierAddress}]\") != string.Empty)\r\n        {\r\n            isRegistered = true;\r\n        }\r\n\r\n        return isRegistered;\r\n    }\r\n\r\n    /// <summary>\r\n    /// A health check method for calling contracts to test the contract is deployed and running\r\n    /// </summary>\r\n    /// <returns>Returns true</returns>\r\n    public bool HealthCheck()\r\n    {\r\n        return true;\r\n    }\r\n}\r\n\r\n";

        public ParcelTrackingContractTests()
        {
            var fixture = new PoAMockChainFixture();
            this.network = new SmartContractsPoARegTest();

            this.mockChain = fixture.Chain;
            this.node1 = this.mockChain.Nodes[0];
            this.node2 = this.mockChain.Nodes[1];
        }

        [Fact]
        public void IsCourierRegistered_Returns_Correctly()
        {
            // Ensure fixture is funded.
            this.mockChain.MineBlocks(1);

            // Deploy couriers contract.
            ContractCompilationResult courierContract = ContractCompiler.Compile(CouriersContract);
            Assert.True(courierContract.Success);
            BuildCreateContractTransactionResponse preResponse = this.node1.SendCreateContractTransaction(courierContract.Compilation, 0);
            this.mockChain.WaitAllMempoolCount(1);
            this.mockChain.MineBlocks(1);
            Assert.NotNull(this.node1.GetCode(preResponse.NewContractAddress));

            // Deploy ParcelTracking contract.
            ContractCompilationResult parcelTrackingContract = ContractCompiler.Compile(ParcelTrackingContract);
            Assert.True(parcelTrackingContract.Success);

            string[] parameters = new string[] { string.Format("{0}#{1}", (int)MethodParameterDataType.Address, preResponse.NewContractAddress) };
            var response = this.node1.SendCreateContractTransaction(
                parcelTrackingContract.Compilation,
                0,
                parameters);
            this.mockChain.WaitAllMempoolCount(1);
            this.mockChain.MineBlocks(1);
            Assert.NotNull(this.node1.GetCode(response.NewContractAddress));

            var courierContractAddress = preResponse.NewContractAddress;
            var parcelContractAddress = response.NewContractAddress;
            var courierBase58Address = this.node1.MinerAddress.Address;
            var courierAddress = courierBase58Address.ToAddress(this.network);

            var storageValue = this.node1.GetStorageValue(courierContractAddress, $"CouriersNameByAddress[0][{courierAddress}]");

            // Check that the storage is empty at first.
            Assert.Null(storageValue);

            // Register a courier.
            parameters = new string[] { string.Format("{0}#{1}", (int)MethodParameterDataType.String, "Test Name") };
            BuildCallContractTransactionResponse registerCourierResponse = this.node1.SendCallContractTransaction(
                "RegisterCourier",
                courierContractAddress,
                0,
                parameters);
            this.mockChain.WaitAllMempoolCount(1);
            this.mockChain.MineBlocks(1);

            // Check the storage value has been set correctly.
            storageValue = this.node1.GetStorageValue(courierContractAddress, $"CouriersNameByAddress[0][{courierAddress}]");
            Assert.Equal("Test Name", Encoding.UTF8.GetString(storageValue));

            // Call locally and check the result.
            parameters = new string[] { string.Format("{0}#{1}", (int)MethodParameterDataType.Address, courierBase58Address) };
            var localCallResult = this.node1.CallContractMethodLocally("IsCourierRegistered", parcelContractAddress, 0, parameters);

            Assert.True((bool)localCallResult.Return);

            // Call "IsCourierRegistered" on chain and check the receipt.
            var onChainCallResult = this.node1.SendCallContractTransaction("IsCourierRegistered", parcelContractAddress, 0, parameters);

            this.mockChain.WaitAllMempoolCount(1);
            this.mockChain.MineBlocks(1);

            // Get the receipt.
            ReceiptResponse receipt = this.node1.GetReceipt(onChainCallResult.TransactionId.ToString());

            Assert.True(receipt.Success);
            Assert.Equal("True", receipt.ReturnValue);
        }
    }
}